/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.39
 * Generated at: 2025-04-03 02:14:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public final class Ex16_005fSession_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!--\r\n");
      out.write("  Server (웹 서버(WAS)     \r\n");
      out.write("    1. server memory : session객체 (사이트 접속하는 [사용자]마다 [고유]하게 부여하는 메모리(객체)) > 서버 리부팅,개발코드변경 > 소멸 > 생성\r\n");
      out.write("    2. server memory : application객체 (사이트 접속하는 [모든 사용자]에게 부여하는 메모리(객체)) > 서버 리부팅,개발코드변경 > 소멸 > 생성\r\n");
      out.write("\r\n");
      out.write("    session 객체 : 서버(Web)에 접속한 사용자 마다 고유하게 부여되는 객체 \r\n");
      out.write("    고유성 보장 (key 값 ) >> 각각의 session객체마다 이름표 > key값 > 클라이언트에도 전달 \r\n");
      out.write("	활용) 클라이언트마다 고유하게 부여 (session 객체)\r\n");
      out.write("	>> 로그인ID , 장바구니(사용자마다 다른) , 사용자의 정보 (각각 다른 정보)  , 사용자마다 접속한 시간, 마지막 접속 시간\r\n");
      out.write("	\r\n");
      out.write("	1. http://192.168.0.29:8090/WebJSP/_Session.jsp 서버에 요청 보내기\r\n");
      out.write("	2. sessionID (key) 생성 ->  session -> sessionID response 해요(Cookie)\r\n");
      out.write("	2.1  JSESSIONID : 43AE93C6D0A5CD99BBCF73149DC1FB14\r\n");
      out.write("	3. 동기화 (너랑 나랑 친구다)\r\n");
      out.write("	\r\n");
      out.write("	ex) 접속자 1000명이 Web Server에는 key 1000개 만들어지고 key이름표로 달고있는 session객체도 1000개 생성\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	ex) Client  로그 아웃 버튼을 클릭 >> 서버는 어떤한 작업을 수행 할까요 >> 로그아웃 판단 >> key 가지고 와서\r\n");
      out.write("	    >> key (이름표) >> 객체를 찿아서 >> abandon (소멸) >> invalidate\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("  -->\r\n");
      out.write("  	");

  		Date time = new Date();
  	    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  	
      out.write("\r\n");
      out.write("  	<h3>Session 객체 정보</h3>\r\n");
      out.write("  	session 객체 식별값 : ");
      out.print(session.getId() );
      out.write("\r\n");
      out.write("  	<hr>\r\n");
      out.write("  	");

  		time.setTime(session.getCreationTime());
  	
      out.write("\r\n");
      out.write("  	[session 생성된 시간 ] : ");
      out.print( formatter.format(time) );
      out.write("\r\n");
      out.write("  	<hr>\r\n");
      out.write("  	");

  		time.setTime(session.getLastAccessedTime());
  	
      out.write("\r\n");
      out.write("  	[session 마지막 접속 시간: client ] : ");
      out.print( formatter.format(time) );
      out.write("\r\n");
      out.write("  \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
