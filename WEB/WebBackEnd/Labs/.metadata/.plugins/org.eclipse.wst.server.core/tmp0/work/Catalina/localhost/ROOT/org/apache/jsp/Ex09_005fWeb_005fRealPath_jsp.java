/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.39
 * Generated at: 2025-04-02 06:12:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Ex09_005fWeb_005fRealPath_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	/*
		URI (Universal Resource Identifier)
		- 인터넷상의 자원을 식별하기 위한 표기법 및 규약
		- URL + URN = URI
		- 인터넷 환경에서 URI는 대부분 URL을 의미, URN은 사용이 제한적
		
		​URL (Uniform Resource Locator)
		- 물리적인 경로, 즉 자원의 위치 정보를 포함
		- 프로토콜, 도메인, 아이피, 포트 등
		- 컴퓨터로부터 접근 가능한 형태의 자원만 검색될 수 있어 제한적
		- 우리가 흔히 보는 'http://test.com:8090/test.jpg' 형태
		
		​​URN (Uniform Resource Name)
		- 독립적인 이름을 제공하기 위해 존재
		- 자원에 대해 영속적이고 유일
		- 자원의 위치와는 무관
		- 예를들어 우리나라에서는 주민등록번호가 대표적
		
		​
		StringBuffer url = request.getRequestURL(); // URL : 전체주소 (프로토콜 + IP + 포트 + 상세경로)
		String uri = request.getRequestURI(); // URI : 프로젝트 이하 경로 (CP + SP)
		String cp = request.getContextPath(); // CP : 프로젝트 명
		String sp = request.getServletPath(); // SP : 패키지 + 파일명
		
		​
		
		System.out.println("URL : " + url);
		System.out.println("URI : " + uri);
		System.out.println("CP : " + cp);
		System.out.println("SP : " + sp);
		
		​
		
		​-----------------------------------------------------------------
		URL : http://192.168.0.12:8090/WebJSP/Ex11_WebApp_RealPath.jsp
		URI : /WebJSP/Ex11_WebApp_RealPath.jsp
		CP : /WebJSP
		SP : /WebJSP/Member/Ex11_WebApp_RealPath.jsp
		
		
		이클립스 톰켓 내장 
		실제 배포 경로 : 실제 서비스 되고 있는 소스는 아래 폴더 소스
		D:\Duzon\Web\WebBack\WebLabs\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\WebJSP
	
	
	*/


      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	String resourcePath = "/download/note.txt";
	out.print(resourcePath + "<br>");
	
	String realContextPath = application.getRealPath(request.getContextPath());   // >>  /WEBJSP
	out.print("getRealPath 실제 경로 : " + realContextPath + "<br>");
	//웹에서의 가상경로 >> 물리적 경로 (서버의 실경로)
	
	//실 웹사이트 배포경로 (소스가 배포된경로 ....)
	//배포가 클라이언트 보는 소스는 바로 여기 .... 
	//C:\inswave\WEB\WebBackEnd\Labs\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\WEBJSP\WEBJSP

	//개발소스 
	//C:\inswave\WEB\WebBackEnd\Labs\WEBJSP\src\main\webapp
	
	//Ctrl  + F11  (이클립스에 내장된 톰켓 서비스 경로 배포까지 실행 ....)
	//이클립스 (개발소스 ) ->  웹서버 배포 -> 이클립스 웹서버(톰켓 내장) -> 경로
	
	StringBuffer url = request.getRequestURL(); //URL  : 전체주소 (프로토콜 + IP + PORT + 상세경로)
	String uri = request.getRequestURI(); //URI  프로젝트 이하경로 (CP + SP)
	String cp = request.getContextPath(); //CP: 프로젝트명 (사이트 이름)
	String sp = request.getServletPath(); //SP: 패키지 + 파일명
	System.out.println("URL : " + url);
	System.out.println("URI : " + uri);
	System.out.println("CP : " + cp);
	System.out.println("sp : " + sp);
	
	/*
	URL : http://localhost:8090/WEBJSP/Ex09_Web_RealPath.jsp
	URI : /WEBJSP/Ex09_Web_RealPath.jsp
	CP : /WEBJSP
	sp : /Ex09_Web_RealPath.jsp
	
	게시판에서 파일 업로드 사용 .... 웹 경로 (실경로) > FILE  I/O 사용 읽고 쓰기
	*/

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
